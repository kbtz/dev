type 洧룳 = any
type 洧롱<T = 洧룳> = { [k: 洧루 | 洧롵]: T }
type 洧롴<R = 洧룳> = (...a: 洧룳[]) => R
type 洧롵 = symbol
type 洧롬 = boolean
type 洧롰 = number
type 洧루 = string
type 洧롞<T> = Array<T>
type Key = 洧루 | 洧롵 | 洧롰

type Alias = Dict<洧루>
type KVP<K, V> = 洧롞<[K, V] & { k: K, v: V }>

type PSet<T = 洧룳, V = 洧룳> = (t: T, k: 洧루, v: V) => 洧롬
type OSet<V = 洧룳> = (v: V) => 洧롬

type PGet<T = 洧룳, V = 洧룳> = (t: T, k: 洧루) => V
type OGet<V = 洧룳> = () => V

type HTMLEventName = keyof HTMLElementEventMap
type WindowEventName = keyof WindowEventMap
type Point = [洧롰, 洧롰]

type Constructor<T = 洧롱> = {
	new(...args: 洧룳[]): T & {};
}